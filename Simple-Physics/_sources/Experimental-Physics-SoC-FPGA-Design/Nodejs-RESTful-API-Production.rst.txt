
Nodejs RESTful API Production
=============================================================

:Date: 5 Oct 2019

Progress
------------

- User registration with email verification
- Password reset with email verification
- Handle request by verifying Email and Password

To Do
---------

- Handle request to **find, create, update, delete** data based on permissions
- Figure out what are **Hash and Salt** and whether I need it if every request requires Email and Password


Backend Main
------------------

- To use:

.. code-block:: console

	sudo service mongod start
	node index.js

- **index.js**

.. code-block:: javascript

	const app = require('express')()
	app.get('/',(req, res)=>{
	    res.sendFile(__dirname+'/index.html')
	})

	const SimpleAPI = require("./my_modules/SimpleAPI.js")
	const simpleAPI = new SimpleAPI(
	    hostIP = 'localhost',
	    port = 3000,
	    app,
	    appName = "SimpleAPI",
	    myAddress = "dingruiqi97m@gmail.com", 
	    myPassword = "."
	)

Backend Module
------------------

- **my_modules/SimpleAPI.js**
- **To Be Completed: sqlite**
- **Dependencies**
	- **express**	// Of course
	- **./SimpleGmail.js**  // To send verification email
	- **crypto**   // To generate secretCode for verification
	- **ejs**	// To use html templates
	- **mongoose (MongoDB)**   // Database

.. code-block:: javascript

	module.exports = class SimpleAPI{
	    constructor(hostIP, port, app, appName, myAddress, myPassword){
	        var self = this
	        self.appName = appName
	        // express server
	        const jsonParser = require('body-parser').json()

	        app.get('/SimpleAPI/setAccountVerify',(req, res)=>{
	            self.verifyEmail(req, res)
	        })
	        app.post('/SimpleAPI',jsonParser,(req,res)=>{
	            if(req.body.type == "setAccount"){
	                self.setAccount(req,res)
	            }
	            else self.verifyAccount(req,res)
	        })
	        self.host = "http://"+hostIP+":"+port
	        app.listen(port, hostIP, () => console.log(self.host))        
	        
	        // mongodb mongoose
	        self.mongoose = require('mongoose')
	        self.mongoose.connect('mongodb://localhost/SimpleAPI',{
	            useNewUrlParser: true,
	            useFindAndModify: false,
	            useCreateIndex: true,
	            useUnifiedTopology: true
	        })  //Fix Deprecation Warnings: https://mongoosejs.com/docs/deprecations.html
	        self.db = self.mongoose.connection
	        self.db.on('error',console.error.bind(console,'db err:'))
	        self.defineSchemasAndModels()

	        // SimpleGmail
	        const SimpleGmail = require("./SimpleGmail.js")
	        self.simpleGmail = new SimpleGmail(myAddress, myPassword)
	    }

	    setAccount(req,res){
	        var self = this
	        var secretCode = require('crypto').randomBytes(16).toString('hex')

	        var query = req.body.setAccount
	        self.AccountModel.findOneAndUpdate(
	            {type: query.type, email: query.email}, 
	            {state: "ToBeVerified"+secretCode},
	            {new: true},
	            (err, modifiedAccount)=>{
	                if(modifiedAccount==null){
	                    var account = new self.AccountModel({
	                        type: query.type, email: query.email,
	                        state: "ToBeVerified"+secretCode
	                    })
	                    account.save()
	                    console.log("\nNew Account:\n", account)
	                }
	                else console.log("\nModified Account:\n", modifiedAccount)
	            }
	        )

	        // send user email for verification
	        var email = query.email
	        var subject = self.appName+": Set Account Verification"
	                
	        var htmlPromise = require('ejs').renderFile(__dirname+'/SetAccountVerification.ejs',{
	            subject: subject, 
	            host: self.host, 
	            setAccount: query,
	            state: "ToBeVerified"+secretCode,
	        })
	        htmlPromise.then( (html)=>{
	            self.simpleGmail.send(email, subject, html)
	            res.send(html) // For Testing
	        })         
	    }

	    verifyEmail(req, res){
	        var self = this
	        var query = req.query
	        self.AccountModel.findOneAndUpdate({
	                type: query.type, email: query.email, 
	                state: query.state 
	            }, 
	            {password: query.password, state:"Verified"},
	            (err,doc)=>{
	                if(doc==null) res.send("Error: This is not the latest link!")
	                else res.json(doc)
	                self.test() 
	            }
	        )
	    }    

	    verifyAccount(req,res){
	        var self = this
	        var query = req.body.verifyAccount
	        self.AccountModel.findOne(
	            {   type: query.type, email: query.email, 
	                password : query.password}, 
	            (err, account)=>{
	                if(account==null){
	                    res.send( "public")
	                }
	                else{
	                    res.send( query.email) 
	                }
	            }
	        )
	    }

	    defineSchemasAndModels(){
	        var self = this
	        var AccountSchema = new self.mongoose.Schema({
	            // for security
	            type: String,
	            email: String,
	            password: String,
	            state: String,
	            // for search
	            labels: [String],
	            // for display
	            display: String
	        })
	        self.AccountModel = self.mongoose.model('AccountModel', AccountSchema)
	    }
	    
	    
	    test(){
	        var self = this
	        self.AccountModel.find((err,accounts)=>{
	            console.log("\nCheck Accounts:\n", accounts)
	        })
	    }
	}


Backend Email Verification Template
--------------------------------------

- **my_modules/SetAccountVerification.ejs**

.. code-block:: html

	<h><%= subject %></h>

	<p>setAccount: <%= JSON.stringify(setAccount) %></p>

	<button>
	    <a href="
	        <%= host+'/SimpleAPI/setAccountVerify?'
	            +'type='        + setAccount.type
	            +'&email='      + setAccount.email
	            +'&password='   + setAccount.password
	            +'&state='      + state
	        %>"
	    >Confirm</a>
	</button>

Frontend For Testing
--------------------------------------

- **index.html**
- **The following code is ugly since it is only for testing!**

.. code-block:: html

	<h>Hello!</h>

	<h3>setAccount verification email will look like this:</h3>
	<div id="setAccount"></div>

	<button onclick="setAccount()">setAccount</button>
	<button onclick="verifyAccount()">verifyAccount</button>
	<button onclick="verifyAccountFail()">verifyAccountFail</button>
	<script>

	  var xhttp = new XMLHttpRequest();
	  xhttp.onreadystatechange = function() {
	    if (this.readyState == 4 && this.status == 200) {
	      document.getElementById("setAccount").innerHTML = this.responseText;
	    }
	  };

	  function setAccount(){
		  var reqbody={
		    type:"setAccount",
		    setAccount: {
		      type: "buyer",
		      email: "416640656@qq.com",
		      password: "qwerty",
		    }
		  };
	  xhttp.open("POST", "http://localhost:3000/SimpleAPI", true);
	  	xhttp.setRequestHeader("Content-type", "application/json");
		  xhttp.send(JSON.stringify(reqbody));  		
	  }

	  function verifyAccount(){
		  var reqbody={
		    type:"verifyAccount",
		    verifyAccount: {
		      type: "buyer",
		      email: "416640656@qq.com",
		      password: "qwerty",
		    }
		  };
		xhttp.open("POST", "http://localhost:3000/SimpleAPI", true);
	     xhttp.setRequestHeader("Content-type", "application/json");
		  xhttp.send(JSON.stringify(reqbody));  
	  }

	  function verifyAccountFail(){
		  var reqbody={
		    type:"verifyAccount",
		    verifyAccount: {
		      type: "buyer",
		      email: "416640656@qq.com",
		      password: "qwertyFail",
		    }
		  };
		xhttp.open("POST", "http://localhost:3000/SimpleAPI", true);
	  	 xhttp.setRequestHeader("Content-type", "application/json");
		  xhttp.send(JSON.stringify(reqbody));  
	  }

	</script>
